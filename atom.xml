<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北冥北龙</title>
  
  <subtitle>青春猪头程序员不会梦到???</subtitle>
  <link href="https://37lament.github.io/atom.xml" rel="self"/>
  
  <link href="https://37lament.github.io/"/>
  <updated>2022-07-20T09:58:09.902Z</updated>
  <id>https://37lament.github.io/</id>
  
  <author>
    <name>37Lament</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>牛客暑假多校(1)</title>
    <link href="https://37lament.github.io/2022/07/20/%E7%89%9B%E5%AE%A2%E6%9A%91%E5%81%87%E5%A4%9A%E6%A0%A1-1/"/>
    <id>https://37lament.github.io/2022/07/20/%E7%89%9B%E5%AE%A2%E6%9A%91%E5%81%87%E5%A4%9A%E6%A0%A1-1/</id>
    <published>2022-07-20T06:29:45.000Z</published>
    <updated>2022-07-20T09:58:09.902Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="G-Lexicographical-Maximum-签到"   >          <a href="#G-Lexicographical-Maximum-签到" class="heading-link"><i class="fas fa-link"></i></a><a href="#G-Lexicographical-Maximum-签到" class="headerlink" title="G Lexicographical Maximum 签到"></a>G Lexicographical Maximum 签到</h4>      <span id="more"></span>        <h5 id="如果满足1到n-1位都是9，答案就是n，否则就是n-1个9"   >          <a href="#如果满足1到n-1位都是9，答案就是n，否则就是n-1个9" class="heading-link"><i class="fas fa-link"></i></a><a href="#如果满足1到n-1位都是9，答案就是n，否则就是n-1个9" class="headerlink" title="如果满足1到n-1位都是9，答案就是n，否则就是n-1个9"></a>如果满足1到n-1位都是9，答案就是n，否则就是n-1个9</h5>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag =<span class="number">0</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>()<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=<span class="string">&#x27;9&#x27;</span>) flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : s)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>()<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="A-Villages-Landlines"   >          <a href="#A-Villages-Landlines" class="heading-link"><i class="fas fa-link"></i></a><a href="#A-Villages-Landlines" class="headerlink" title="A Villages: Landlines"></a><strong>A Villages: Landlines</strong></h4>              <h5 id="贪心思路，区间合并，然后把合并好的区间之间空的地方用电线连接好即可"   >          <a href="#贪心思路，区间合并，然后把合并好的区间之间空的地方用电线连接好即可" class="heading-link"><i class="fas fa-link"></i></a><a href="#贪心思路，区间合并，然后把合并好的区间之间空的地方用电线连接好即可" class="headerlink" title="贪心思路，区间合并，然后把合并好的区间之间空的地方用电线连接好即可"></a>贪心思路，区间合并，然后把合并好的区间之间空的地方用电线连接好即可</h5>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        f[i].x=a-b;</span><br><span class="line">        f[i].y=a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(f,f+n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;<span class="type">int</span> r = <span class="number">-2e9</span> - <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( r == <span class="number">-2e9</span> - <span class="number">10</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            r = f[i].y;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( f[ i ].x &gt; r ) ans += ( f[i].x - r );</span><br><span class="line">        r = <span class="built_in">max</span>(r, f[i].y );</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="D-Mocha-and-Railgun"   >          <a href="#D-Mocha-and-Railgun" class="heading-link"><i class="fas fa-link"></i></a><a href="#D-Mocha-and-Railgun" class="headerlink" title="D Mocha and Railgun"></a><strong>D Mocha and Railgun</strong></h4>              <h5 id="题意：在中心为-0-0-半径为r的圆内，有一个角度任意但位置固定的发射器，该发射器的半径为a，求如何找到一个角度使得发射器对圆的投影弧长最大"   >          <a href="#题意：在中心为-0-0-半径为r的圆内，有一个角度任意但位置固定的发射器，该发射器的半径为a，求如何找到一个角度使得发射器对圆的投影弧长最大" class="heading-link"><i class="fas fa-link"></i></a><a href="#题意：在中心为-0-0-半径为r的圆内，有一个角度任意但位置固定的发射器，该发射器的半径为a，求如何找到一个角度使得发射器对圆的投影弧长最大" class="headerlink" title="题意：在中心为(0,0)半径为r的圆内，有一个角度任意但位置固定的发射器，该发射器的半径为a，求如何找到一个角度使得发射器对圆的投影弧长最大"></a>题意：在中心为(0,0)半径为r的圆内，有一个角度任意但位置固定的发射器，该发射器的半径为a，求如何找到一个角度使得发射器对圆的投影弧长最大</h5>              <h6 id="猜结论，垂直于两圆心连线的轨道炮摧毁长度最大。"   >          <a href="#猜结论，垂直于两圆心连线的轨道炮摧毁长度最大。" class="heading-link"><i class="fas fa-link"></i></a><a href="#猜结论，垂直于两圆心连线的轨道炮摧毁长度最大。" class="headerlink" title="猜结论，垂直于两圆心连线的轨道炮摧毁长度最大。"></a>猜结论，垂直于两圆心连线的轨道炮摧毁长度最大。</h6>      <p>由几何关系可算出target</p><p><img src="https://pic4.zhimg.com/80/v2-4197ead91df0b2055d2aa390ad2e7d47_720w.jpg" alt="Alt"></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    x, y, d = <span class="built_in">str</span>.split(<span class="built_in">input</span>())</span><br><span class="line">    x = <span class="built_in">int</span>(x)</span><br><span class="line">    y = <span class="built_in">int</span>(y)</span><br><span class="line">    d = <span class="built_in">int</span>(d)</span><br><span class="line">    dist=sqrt(x**<span class="number">2</span>+y**<span class="number">2</span>)</span><br><span class="line">    d1=sqrt(r**<span class="number">2</span>-(dist+d)**<span class="number">2</span>)</span><br><span class="line">    d2=sqrt(r**<span class="number">2</span>-(dist-d)**<span class="number">2</span>)</span><br><span class="line">    rr=sqrt((d2-d1)**<span class="number">2</span>+<span class="number">4</span>*d*d)</span><br><span class="line">    rr/=<span class="number">2</span></span><br><span class="line">    tt=(r**<span class="number">2</span>-rr**<span class="number">2</span>)</span><br><span class="line">    rad=fabs(asin(rr/r))</span><br><span class="line">    rad*=<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(rad*r)</span><br></pre></td></tr></table></div></figure><p>这题还有一些小插曲，打完出来看牛客群群友都在说精度不够，还好我们用的py</p>        <h4 id="I-Chiitoitsu"   >          <a href="#I-Chiitoitsu" class="heading-link"><i class="fas fa-link"></i></a><a href="#I-Chiitoitsu" class="headerlink" title="I Chiitoitsu"></a><strong>I Chiitoitsu</strong></h4>              <h5 id="题意：打麻将，还是日麻，凑对子，开局13张牌，请问凑成7对摸牌期望是多少轮。"   >          <a href="#题意：打麻将，还是日麻，凑对子，开局13张牌，请问凑成7对摸牌期望是多少轮。" class="heading-link"><i class="fas fa-link"></i></a><a href="#题意：打麻将，还是日麻，凑对子，开局13张牌，请问凑成7对摸牌期望是多少轮。" class="headerlink" title="题意：打麻将，还是日麻，凑对子，开局13张牌，请问凑成7对摸牌期望是多少轮。"></a>题意：打麻将，还是日麻，凑对子，开局13张牌，请问凑成7对摸牌期望是多少轮。</h5>              <h6 id="分析：概率dp，f-i-j-表示目前有i对，牌库剩余j张牌时胡牌的期望轮数。一共有136张牌，而我们手里的牌每次摸完都要打出去，而最优策略是摸到一张手里有的牌然后把单张的牌打出去，那么对子数-1，牌库数-1，否则摸到的牌不能与手里的任何牌凑成对子，对子数不变，因此推出转移方程为："   >          <a href="#分析：概率dp，f-i-j-表示目前有i对，牌库剩余j张牌时胡牌的期望轮数。一共有136张牌，而我们手里的牌每次摸完都要打出去，而最优策略是摸到一张手里有的牌然后把单张的牌打出去，那么对子数-1，牌库数-1，否则摸到的牌不能与手里的任何牌凑成对子，对子数不变，因此推出转移方程为：" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析：概率dp，f-i-j-表示目前有i对，牌库剩余j张牌时胡牌的期望轮数。一共有136张牌，而我们手里的牌每次摸完都要打出去，而最优策略是摸到一张手里有的牌然后把单张的牌打出去，那么对子数-1，牌库数-1，否则摸到的牌不能与手里的任何牌凑成对子，对子数不变，因此推出转移方程为：" class="headerlink" title="分析：概率dp，f[i][j]表示目前有i对，牌库剩余j张牌时胡牌的期望轮数。一共有136张牌，而我们手里的牌每次摸完都要打出去，而最优策略是摸到一张手里有的牌然后把单张的牌打出去，那么对子数-1，牌库数-1，否则摸到的牌不能与手里的任何牌凑成对子，对子数不变，因此推出转移方程为："></a>分析：概率dp，f[i][j]表示目前有i对，牌库剩余j张牌时胡牌的期望轮数。一共有136张牌，而我们手里的牌每次摸完都要打出去，而最优策略是摸到一张手里有的牌然后把单张的牌打出去，那么对子数-1，牌库数-1，否则摸到的牌不能与手里的任何牌凑成对子，对子数不变，因此推出转移方程为：</h6>      ]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;G-Lexicographical-Maximum-签到&quot;   &gt;
          &lt;a href=&quot;#G-Lexicographical-Maximum-签到&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#G-Lexicographical-Maximum-签到&quot; class=&quot;headerlink&quot; title=&quot;G Lexicographical Maximum 签到&quot;&gt;&lt;/a&gt;G Lexicographical Maximum 签到&lt;/h4&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>线段树板子</title>
    <link href="https://37lament.github.io/2022/07/20/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%9D%BF%E5%AD%90/"/>
    <id>https://37lament.github.io/2022/07/20/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%9D%BF%E5%AD%90/</id>
    <published>2022-07-19T16:06:22.000Z</published>
    <updated>2022-07-20T09:59:35.646Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="板子"   >          <a href="#板子" class="heading-link"><i class="fas fa-link"></i></a><a href="#板子" class="headerlink" title="板子"></a>板子</h4>      <span id="more"></span><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1</span>* <span class="number">10e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m;<span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tr</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, sum,lz;</span><br><span class="line">&#125; tree[<span class="number">4</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].lz!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i*<span class="number">2</span>].lz+=tree[i].lz;<span class="comment">//左右儿子分别加上父亲的lz</span></span><br><span class="line">        tree[i*<span class="number">2</span>+<span class="number">1</span>].lz+=tree[i].lz;</span><br><span class="line">        <span class="type">int</span> mid=(tree[i].l+tree[i].r)/<span class="number">2</span>;</span><br><span class="line">        tree[i*<span class="number">2</span>].sum+=tree[i].lz*(mid-tree[i*<span class="number">2</span>].l+<span class="number">1</span>);<span class="comment">//左右分别求和加起来</span></span><br><span class="line">        tree[i*<span class="number">2</span>+<span class="number">1</span>].sum+=tree[i].lz*(tree[i*<span class="number">2</span>+<span class="number">1</span>].r-mid);</span><br><span class="line">        tree[i].lz=<span class="number">0</span>;<span class="comment">//父亲lz归零</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//递归建树</span></span><br><span class="line">    tree[i].l=l;tree[i].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;<span class="comment">//如果这个节点是叶子节点</span></span><br><span class="line">        tree[i].sum=f[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(i*<span class="number">2</span>,l,mid);<span class="comment">//分别构造左子树和右子树</span></span><br><span class="line">    <span class="built_in">build</span>(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">push_up</span>(i);<span class="comment">//刚才我们发现的性质return ;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;=r&amp;&amp;tree[i].l&gt;=l)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].sum+=k*(tree[i].r-tree[i].l+<span class="number">1</span>);</span><br><span class="line">        tree[i].lz+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(i);<span class="comment">//向下传递</span></span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r,k);</span><br><span class="line">    <span class="built_in">push_up</span>(i);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r)</span><br><span class="line">        <span class="keyword">return</span> tree[i].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;l || tree[i].l&gt;r)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(i);</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a,b,c;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>,a,b,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a,b;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">search</span>(<span class="number">1</span>,a,b)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;板子&quot;   &gt;
          &lt;a href=&quot;#板子&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#板子&quot; class=&quot;headerlink&quot; title=&quot;板子&quot;&gt;&lt;/a&gt;板子&lt;/h4&gt;</summary>
    
    
    
    <category term="算法" scheme="https://37lament.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="线段树" scheme="https://37lament.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="数据结构" scheme="https://37lament.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
